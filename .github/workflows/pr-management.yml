name: PR Management

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

jobs:
  notify-and-manage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Notify @romkey of new PR
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = context.payload.pull_request;
            
            // Create a detailed notification comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `🎉 **New Pull Request Submitted**
              
              @${owner}, a new pull request has been submitted for review:
              
              **PR #${number}**: ${pr.title}
              **Author**: @${pr.user.login}
              **Branch**: \`${pr.head.ref}\` → \`${pr.base.ref}\`
              **Created**: ${new Date(pr.created_at).toLocaleString()}
              **Files Changed**: ${pr.changed_files} files
              **Additions**: +${pr.additions} lines
              **Deletions**: -${pr.deletions} lines
              
              ${pr.body ? `**Description**:\n${pr.body.substring(0, 300)}${pr.body.length > 300 ? '...' : ''}` : '**No description provided**'}
              
              [View Pull Request](https://github.com/${owner}/${repo}/pull/${number})
              [View Changes](https://github.com/${owner}/${repo}/pull/${number}/files)
              
              ---
              *This notification was automatically generated by GitHub Actions*`
            });
            
            // Add the repo owner as assignee if not already assigned
            const currentAssignees = pr.assignees.map(a => a.login);
            if (!currentAssignees.includes(owner)) {
              await github.rest.issues.addAssignees({
                owner,
                repo,
                issue_number: number,
                assignees: [owner]
              });
            }
            
            // Add appropriate labels based on PR content
            const labels = ['needs-review'];
            
            // Check if it's a documentation PR
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number
            });
            
            const hasDocs = files.data.some(file => 
              file.filename.includes('README') || 
              file.filename.includes('docs/') || 
              file.filename.includes('.md')
            );
            
            if (hasDocs) {
              labels.push('documentation');
            }
            
            // Check if it's a bug fix
            const isBugFix = pr.title.toLowerCase().includes('fix') || 
                           pr.title.toLowerCase().includes('bug') ||
                           pr.body.toLowerCase().includes('fix') ||
                           pr.body.toLowerCase().includes('bug');
            
            if (isBugFix) {
              labels.push('bug-fix');
            }
            
            // Check if it's a feature
            const isFeature = pr.title.toLowerCase().includes('feature') || 
                            pr.title.toLowerCase().includes('add') ||
                            pr.body.toLowerCase().includes('feature') ||
                            pr.body.toLowerCase().includes('add');
            
            if (isFeature) {
              labels.push('enhancement');
            }
            
            // Add labels
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: number,
              labels: labels
            });
            
            console.log(`✅ Notified @${owner} about PR #${number} and added labels: ${labels.join(', ')}`);
            
      - name: Update PR status
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = context.payload.pull_request;
            
            // Update the PR with latest commit info
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `🔄 **PR Updated**
              
              @${owner}, this pull request has been updated:
              
              **Latest Commit**: ${pr.head.sha.substring(0, 7)}
              **Updated**: ${new Date().toLocaleString()}
              **Files Changed**: ${pr.changed_files} files
              **Additions**: +${pr.additions} lines
              **Deletions**: -${pr.deletions} lines
              
              [View Latest Changes](https://github.com/${owner}/${repo}/pull/${number}/files)
              
              ---
              *This notification was automatically generated by GitHub Actions*`
            });
            
            console.log(`✅ Updated @${owner} about PR #${number} changes`);
            
      - name: Basic PR validation
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = context.payload.pull_request;
            
            // Check if PR has a description
            if (!pr.body || pr.body.trim().length < 10) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `⚠️ **PR Description Required**
                
                This pull request doesn't have a sufficient description. Please add a description explaining:
                
                - What changes are being made
                - Why these changes are needed
                - How to test the changes
                
                This helps reviewers understand the purpose and scope of your changes.
                
                ---
                *This check was automatically generated by GitHub Actions*`
              });
            }
            
            // Check if PR is from a fork (external contributor)
            if (pr.head.repo.full_name !== pr.base.repo.full_name) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: `👋 **Welcome External Contributor!**
                
                Thank you for contributing to circremote! This PR is from an external repository.
                
                Please ensure you have:
                - [ ] Read the contributing guidelines
                - [ ] Added appropriate tests if applicable
                - [ ] Updated documentation if needed
                - [ ] Followed the code style guidelines
                
                A maintainer will review your PR shortly.
                
                ---
                *This message was automatically generated by GitHub Actions*`
              });
            }
            
            console.log(`✅ Completed basic validation for PR #${number}`); 